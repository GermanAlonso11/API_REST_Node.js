const swaggerJSDoc = require('swagger-jsdoc');
const swaggerUi = require('swagger-ui-express');

// Configuraci√≥n b√°sica de Swagger
const swaggerOptions = {
  definition: {
    openapi: '3.0.0',
    info: {
      title: 'Prueba T√©cnica API',
      version: '1.0.0',
      description: `# üìã API REST para Gesti√≥n de Usuarios y Roles enfocado a Desarrolladores
**Prueba t√©cnica para puesto Backend Developer**

## üöÄ Gu√≠a de Uso de la API

### üìå **Informaci√≥n General**
Esta API permite gestionar usuarios y roles con un sistema completo de CRUD (Crear, Leer, Actualizar, Eliminar). Todos los endpoints est√°n protegidos con validaciones robustas y proporcionan mensajes de error descriptivos.

---

## üë• **Gesti√≥n de Usuarios**

### ‚úÖ **Crear Usuario** \`POST /api/users\`
**Campos requeridos:** \`name\`, \`email\`, \`password\`, \`role_id\`  

**Ejemplo de petici√≥n:**
\`\`\`json
{
  "name": "Juan P√©rez",
  "email": "juan.perez@empresa.com",
  "password": "123456",
  "role_id": 2
}
\`\`\`

**Validaciones:**
- ‚úÖ **name**: Entre 2 y 50 caracteres
- ‚úÖ **email**: Formato de email v√°lido y √∫nico en el sistema
- ‚úÖ **password**: M√≠nimo 2 caracteres, m√°ximo 12
- ‚úÖ **role_id**: Debe existir en la tabla de roles (1-4 para roles predefinidos)

**Posibles errores:**
- \`400\`: Email ya existe, nombre muy corto/largo, role_id inv√°lido
- \`500\`: Error del servidor

---

### üìñ **Consultar Usuarios** \`GET /api/users\`
Obtiene la lista completa de usuarios con toda su informaci√≥n.

**Respuesta incluye:**
- Datos b√°sicos del usuario
- role_id asociado
- Fechas de creaci√≥n y actualizaci√≥n

---

### üîç **Consultar Usuario por ID** \`GET /api/users/:id\`
Obtiene un usuario espec√≠fico por su ID.

**Posibles errores:**
- \`404\`: Usuario no encontrado
- \`500\`: Error del servidor

---

### ‚úèÔ∏è **Actualizar Usuario** \`PUT /api/users/:id\`
Actualiza uno o varios campos de un usuario existente.

**Ejemplo de petici√≥n:**
\`\`\`json
{
  "name": "Juan Carlos P√©rez",
  "email": "juan.carlos@empresa.com",
  "password": "123456789",
  "role_id": 3
}
\`\`\`

**Validaciones especiales:**
- ‚úÖ **Email √∫nico**: Si cambias el email, no debe existir otro usuario con ese email
- ‚úÖ **Validaciones por campo**: Solo valida los campos que env√≠es
- ‚úÖ **role_id**: Debe existir si lo incluyes en la petici√≥n

**Posibles errores:**
- \`404\`: Usuario no encontrado
- \`400\`: Email ya en uso, validaciones de formato
- \`500\`: Error del servidor

---

### üóëÔ∏è **Eliminar Usuario** \`DELETE /api/users/:id\`
Elimina un usuario del sistema permanentemente.

**‚ö†Ô∏è Importante:** Esta acci√≥n es irreversible

**Posibles errores:**
- \`404\`: Usuario no encontrado
- \`500\`: Error del servidor

---

## üé≠ **Gesti√≥n de Roles**

### ‚úÖ **Crear Rol** \`POST /api/roles\`
**Campos requeridos:** \`name\`  
**Campo opcional:** \`description\`

**Ejemplo de petici√≥n:**
\`\`\`json
{
  "name": "Administrador",
  "description": "Acceso completo al sistema"
}
\`\`\`

**Validaciones:**
- ‚úÖ **name**: Entre 2 y 50 caracteres, √∫nico en el sistema
- ‚úÖ **description**: Opcional, sin l√≠mite espec√≠fico

**Posibles errores:**
- \`400\`: Nombre ya existe, nombre muy corto/largo
- \`500\`: Error del servidor

---

### üìñ **Consultar Roles** \`GET /api/roles\`
Obtiene todos los roles.

**Respuesta incluye:**
- Informaci√≥n b√°sica del rol
- Fechas de creaci√≥n y actualizaci√≥n

**Ejemplo de respuesta:**
\`\`\`json
{
  "message": "Roles fetched successfully",
  "roles": [
    {
      "id": 1,
      "name": "Administrador",
      "description": "Acceso completo al sistema",
      "createdAt": "2025-08-23T...",
      "updatedAt": "2025-08-23T..."
    }
  ]
}
\`\`\`

---

### üîç **Consultar Rol por ID** \`GET /api/roles/:id\`
Obtiene un rol espec√≠fico.

**Posibles errores:**
- \`404\`: Rol no encontrado
- \`500\`: Error del servidor

---

### ‚úèÔ∏è **Actualizar Rol** \`PUT /api/roles/:id\`
Actualiza la informaci√≥n de un rol existente.

**Validaciones especiales:**
- ‚úÖ **Nombre √∫nico**: Si cambias el nombre, no debe existir otro rol con ese nombre
- ‚úÖ **Integridad referencial**: No afecta a usuarios ya asignados

**Posibles errores:**
- \`404\`: Rol no encontrado
- \`400\`: Nombre ya en uso, validaciones de formato
- \`500\`: Error del servidor

---

### üóëÔ∏è **Eliminar Rol** \`DELETE /api/roles/:id\`
Elimina un rol del sistema.

**‚ö†Ô∏è Importante:** 
- Si hay usuarios asignados al rol, se asignara el rol default "Desarrollador"
- Los usuarios asociados NO ser√°n eliminados
- Esta acci√≥n es irreversible

**Posibles errores:**
- \`404\`: Rol no encontrado
- \`500\`: Error del servidor

---

## üéØ **Roles Predefinidos**
El sistema viene con 4 roles predefinidos:

| ID | Nombre | Descripci√≥n |
|----|--------|-------------|
| 1 | Administrador | Acceso completo al sistema |
| 2 | Lider de Proyecto | Gesti√≥n de proyectos y equipos |
| 3 | Desarrollador | Desarrollo de software |
| 4 | QA | Testing y control de calidad |


---

## üîç **Estructura de Errores**
Todos los errores siguen el mismo formato:

\`\`\`json
{
  "message": "Descripci√≥n espec√≠fica del error",
  "data": {}
}
\`\`\`

---
## üîó **URL Base**
- **Base de la API**: \`http://localhost:3000/api-docs\`
---

**Desarrollado por:** German Alonso Aguiniga Ascencio  
**Contacto:** german.aguiniga11@outlook.es`,
      contact: {
        name: 'German Alonso Aguiniga Ascencio',
        email: 'german.aguiniga11@outlook.es'
      }
    },
    servers: [
      {
        url: 'http://localhost:3000/api',
        description: 'Servidor de desarrollo'
      }
    ],
    tags: [
      {
        name: 'Users',
        description: 'Endpoints para gesti√≥n de usuarios'
      },
      {
        name: 'Roles',
        description: 'Endpoints para gesti√≥n de roles'
      }
    ],
    components: {
      schemas: {
        User: {
          type: 'object',
          properties: {
            id: {
              type: 'integer',
              description: 'ID √∫nico del usuario',
              example: 1
            },
            name: {
              type: 'string',
              description: 'Nombre del usuario',
              minLength: 2,
              maxLength: 100,
              example: 'Juan P√©rez'
            },
            email: {
              type: 'string',
              format: 'email',
              description: 'Email √∫nico del usuario',
              example: 'juan.perez@email.com'
            },
            password: {
              type: 'string',
              description: 'Contrase√±a del usuario (opcional)',
              minLength: 6,
              maxLength: 255,
              example: 'password123'
            },
            role_id: {
              type: 'integer',
              description: 'ID del rol asignado al usuario',
              example: 1
            },
            createdAt: {
              type: 'string',
              format: 'date-time',
              description: 'Fecha de creaci√≥n',
              example: '2025-08-23T10:30:00.000Z'
            },
            updatedAt: {
              type: 'string',
              format: 'date-time',
              description: 'Fecha de √∫ltima actualizaci√≥n',
              example: '2025-08-23T10:30:00.000Z'
            }
          }
        },
        UserInput: {
          type: 'object',
          required: ['name', 'email', 'role_id'],
          properties: {
            name: {
              type: 'string',
              description: 'Nombre del usuario',
              minLength: 2,
              maxLength: 100,
              example: 'Juan P√©rez'
            },
            email: {
              type: 'string',
              format: 'email',
              description: 'Email √∫nico del usuario',
              example: 'juan.perez@email.com'
            },
            password: {
              type: 'string',
              description: 'Contrase√±a del usuario (opcional)',
              minLength: 6,
              maxLength: 255,
              example: 'password123'
            },
            role_id: {
              type: 'integer',
              description: 'ID del rol asignado al usuario',
              example: 1
            }
          }
        },
        Role: {
          type: 'object',
          required: ['name'],
          properties: {
            id: {
              type: 'integer',
              description: 'ID √∫nico del rol',
              example: 1
            },
            name: {
              type: 'string',
              description: 'Nombre del rol',
              minLength: 2,
              maxLength: 50,
              example: 'Desarrollador'
            },
            description: {
              type: 'string',
              description: 'Descripci√≥n del rol',
              example: 'Rol para desarrolladores de software'
            },
            createdAt: {
              type: 'string',
              format: 'date-time',
              description: 'Fecha de creaci√≥n',
              example: '2025-08-23T10:30:00.000Z'
            },
            updatedAt: {
              type: 'string',
              format: 'date-time',
              description: 'Fecha de √∫ltima actualizaci√≥n',
              example: '2025-08-23T10:30:00.000Z'
            }
          }
        },
        RoleInput: {
          type: 'object',
          required: ['name'],
          properties: {
            name: {
              type: 'string',
              description: 'Nombre del rol',
              minLength: 2,
              maxLength: 50,
              example: 'Desarrollador'
            },
            description: {
              type: 'string',
              description: 'Descripci√≥n del rol',
              example: 'Rol para desarrolladores de software'
            }
          }
        },
        SuccessResponse: {
          type: 'object',
          properties: {
            message: {
              type: 'string',
              description: 'Mensaje de √©xito'
            },
            data: {
              type: 'object',
              description: 'Datos de respuesta'
            }
          }
        },
        ErrorResponse: {
          type: 'object',
          properties: {
            message: {
              type: 'string',
              description: 'Mensaje de error'
            },
            data: {
              type: 'object',
              description: 'Datos adicionales del error'
            }
          }
        }
      }
    }
  },
  apis: [
    './src/controllers/*.js'
  ]
};

const swaggerSpec = swaggerJSDoc(swaggerOptions);

module.exports = {
  swaggerUi,
  swaggerSpec
};
